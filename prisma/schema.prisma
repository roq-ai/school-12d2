generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model examination {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  student_id String?  @db.Uuid
  subject    String   @db.VarChar(255)
  date       DateTime @db.Timestamp(6)
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  student    student? @relation(fields: [student_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model it_staff {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String   @db.VarChar(255)
  school_id  String?  @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  school     school?  @relation(fields: [school_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model school {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?    @db.VarChar(255)
  name        String     @db.VarChar(255)
  created_at  DateTime   @default(now()) @db.Timestamp(6)
  updated_at  DateTime   @default(now()) @db.Timestamp(6)
  user_id     String     @db.Uuid
  tenant_id   String     @db.VarChar(255)
  it_staff    it_staff[]
  user        user       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  student     student[]
  teacher     teacher[]
}

model student {
  id                String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name              String        @db.VarChar(255)
  attendance        Int?
  academic_record   Int?
  behavior_record   Int?
  health_record     Int?
  admission_status  Boolean?
  enrollment_status Boolean?
  fee_status        Boolean?
  parent_info       String?       @db.VarChar(255)
  school_id         String?       @db.Uuid
  created_at        DateTime      @default(now()) @db.Timestamp(6)
  updated_at        DateTime      @default(now()) @db.Timestamp(6)
  examination       examination[]
  school            school?       @relation(fields: [school_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  timetable         timetable[]
}

model teacher {
  id         String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String      @db.VarChar(255)
  subject    String      @db.VarChar(255)
  school_id  String?     @db.Uuid
  created_at DateTime    @default(now()) @db.Timestamp(6)
  updated_at DateTime    @default(now()) @db.Timestamp(6)
  school     school?     @relation(fields: [school_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  timetable  timetable[]
}

model timetable {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  student_id String?  @db.Uuid
  teacher_id String?  @db.Uuid
  subject    String   @db.VarChar(255)
  time       DateTime @db.Timestamp(6)
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  student    student? @relation(fields: [student_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  teacher    teacher? @relation(fields: [teacher_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String   @unique @db.VarChar(255)
  firstName   String?  @db.VarChar(255)
  lastName    String?  @db.VarChar(255)
  roq_user_id String   @db.VarChar(255)
  tenant_id   String   @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  school      school[]
}
